hanzo warc tools

open source tool for a proprietary standard :)


support:
    warc files as per iso spec
    arc files as per ia spec

    both compressed and uncompressed
    indexed and unindexed

provide:
    arc to warc conversion
  *  human readable dump of warc files
    validator 
        pass/fail for a warc file
        print out all valid records
        print out all junk records

    grep like program
        print warcs by some thing
    sed like program *possible*
        change these warcs this way


done:

    record skeleton
    warc parsing
    gzip'd record format reading
    uncompressed reading
    newline ambivilence
    error logging

done a bit:
    warcdump
    warc2warc

done abit:

todo:
    warc file writing, printing
    arc file reading, printing
    warc file index creation
    arc to warc file conversion
    writing to compressed record streams

frontend todo:
    arc2warc 
    warc2cdx  - cdx index files ala ia
    warcdump - human readable summary
    warcfilter - filter on id, mimetype or url (date)?
    warcvalidator - either return 0 or 1 for a valid archive,


done:
    warcfilter - akeleton
    warcvalidator - simple

warcfilter:
    The filter can be used on the WARC-Subject-Uri field (if existing), on
    the Content-Type field or on the WARC-Type field.




warc2cdx: find some version of the cdx format ?

726      * <p>Outputs using a pseudo-CDX format as described here:
727      * <a href="http://www.archive.org/web/researcher/cdx_legend.php">CDX
728      * Legent</a> and here
729      * <a href="http://www.archive.org/web/researcher/example_cdx.php">Example</a>.
730      * Legend used in below is: 'CDX b e a m s c V (or v if uncompressed) n g'


" CDX N b a m s k r M V g";

massaged url
date original response-code redirect metatags(-) offset name

The default first line of a CDX file is : 
CDX A b e a m s c k r V v D d g M n

http://web.archive.org/web/20080503004330/http://www.archive.org/web/researcher/example_cdx.php


A canonized url 
b date ** 
e IP ** 
a original url ** 
m mime type of original document * 
s response code * 
c old style checksum * 
k new style checksum * 
r redirect * 
d uncompressed dat file offset 
V compressed arc file offset * 
v uncompressed arc file offset * 
D compressed dat file offset 
d uncompressed dat file offset 
g file name 
M meta tags (AIF) * 
n arc document length * 

f frame * 
h original host 
i image * 
j original jump point 
l link * 
o port 
p original path 
t title * 
x url in other href tages * 
y url in other src tags * 
z url found in script * 


date

------

next todo:

done:
    arc,warc reading
    gzip/plain reading

    human readable dump

    extracting offsets from a file

    autodetect gzip
    autodetect arc/warc

todo:
    arc2warc
    warc2cdx
    warcfilter
    warcvalidator


rough idea:

    warc stream access: 
        allow setting codec
   *     reading gz or normal file
   *     read record at a time along with offset information
        append
        create index


        
    warcrecord:
   *     dump
    *    access headers/bits
        validator (check iso constraints)

    note: record does not know where it came from, it is just a struct
    

    arc stream access (same)

    arc record
        access headers/bits
        dump
        no validator, effort.


code:
    error handler passed in (default, whine, can throw execption to stop)

    sort headers on dump rather than archive order



class record(object):
        def date()
        def headers(): -> [(name,val),...]
            pass
        def payload() -> (type, buf)
        def dump(dest=stringio,sort_headers) -> dest
        def write_to(...)

def warcrecord(record)
    def version()
    def type -> warc type
    def id()
    def content()
    def mime()
    def validate() 

    provide class methods for factories for standard types

def stream(object):
    def __init__(stringio)
    def __iter__(self):
        ...
    def index() -> stringio
    def append()

def indexedstream(stream):
    



def arcrecord(record)
    url, ip, date, content-type, length, payload
    def url()
    def ip()
    def to_warc_records(dest=stringio) -> stringio
    


todo


warc.py - add iso failures to error list 

mandatory headers
header uniqueness
well formed values for mandatory headers/dates/types
